import os
import numpy as np
import scipy
from scipy import stats

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
plt.ion()

import csv


#data location
path = '\Users\WinerB\Desktop'
#csv name
fnameWT1 = 'BYW12292020_P2RY8_1uM_GGG_Spots in tracks statistics'


os.chdir(path)


#fn to convert csv into nested array of [[partticle_num, t, x, y]]
def array_gen(fname):
    i = 0
    array_rep = []
    with open(fname.split('.')[0] + '.csv', newline='') as csvfile:
         spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
         for row in spamreader:
            i+= 1
            if i ==1:
                title_row = row
            else:
                particle = row[0].split(',')[2]
                x = row[0].split(',')[4]
                y = float(row[0].split(',')[5]) #corrects for diff indexing in images and trackmate
                t = row[0].split(',')[8]
                array_rep.append([int(particle),int(t),float(x),float(y)])
                #input()
    array_rep = np.asarray(array_rep)
    particlenums = np.unique(array_rep[:,0])
    array_rep_total = []
    for particle in particlenums:
        array_rep_total.append(array_rep[array_rep[:,0] == particle])
    return array_rep_total

#convert the csv
WTdata = array_gen(fnameWT1)

#calculate displacement of each track
WT_disp = [np.sqrt((entry[-1,3]-entry[0,3])**2 + (entry[-1,2]-entry[0,2])**2) for entry in WTdata]

#calculate distance of each track
WT_dist = [np.sum(np.sqrt((entry[1:,3]-entry[0:-1,3])**2 + (entry[1:,2]-entry[0:-1,2])**2)) for entry in WTdata]

#plot trajectories to check everything looks good
plt.figure()
plt.subplot(1,2,1)
for entry in WTdata:
    plt.plot(entry[:,2], entry[:,3])
plt.title('trajectories')
plt.subplot(1,2,2)
for entry in WTdata:
    plt.arrow(entry[0,2], entry[0,3], entry[-1,2]-entry[0,2], entry[-1,3]-entry[0,3], head_width = 1)
plt.xlim([0, 650]) #in um
plt.ylim([0, 650]) #in um
plt.title('movement directions')

####alignment###
pattern = [1, 0] #direction of alignment, x axis
def angleCalc(data,step):
    angles_tot = []
    for j in range(len(WTdata)):
        entry = WTdata[j]
        coords = entry[:,2:] #isolate x and y
        angles = []
        if len(entry) > step:
            for i in range(int(len(entry)//step)):
                upperindex = step*i+step
                if upperindex < len(entry):
                    ax = coords[step*i+step][0]-coords[step*i][0], coords[step*i+step][1]-coords[step*i][1]
                    val = np.dot(ax, pattern)/(np.linalg.norm(pattern)*np.linalg.norm(ax))
                    angle = np.rad2deg(np.arccos(val))
                    angles.append(angle)
            angles_tot.append(np.mean(angles))
    plt.figure()
    for vals in angles_tot:
        plt.arrow(0,0, np.cos(np.deg2rad(vals)), np.sin(np.deg2rad(vals)))
    plt.xlim([-1,1])
    plt.title('centered vectors')
    return angles_tot


angles = angleCalc(WTdata, 5)


plt.figure()
plt.axes(projection = 'polar')
bins = np.linspace(0, np.pi, 10)
histWT = plt.hist(np.deg2rad(angles), bins = bins, density = True)
exit()
